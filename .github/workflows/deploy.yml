name: deploy

env:
  GRAAL_VERSION: "20.3.0.java11"
  TOOLS_CLI_VERSION: "1.12.0.1488" # or "latest"

# on:
#   push:
#     tags:
#       - "*.*.*"
on: [push, pull_request]

jobs:
  build-jar:
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - uses: actions/cache@v4
        with:
          path: ~/.gitlibs
          key: ${{ runner.os }}-deps-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Parse Ref
        id: parse-ref
        run: |
          echo ::set-output name=version::${GITHUB_REF#refs/tags/}

      - name: Install Node.js 9.x
        uses: actions/setup-node@v4
        with:
          node-version: 9.x

      - name: Setup Clojure (https://github.com/marketplace/actions/setup-clojure)
        uses: DeLaGuardo/setup-clojure@master
        with:
          cli: ${{ env.TOOLS_CLI_VERSION }}

      - name: Check clojure version
        run: clojure -Sdescribe

      - name: Build into uberjar
        run: |
          npm run pkg-java && \
          mv target/clob.jar clob.jar

      - name: clob.peg tests
        run: |
          cd peg
          ./script/test

      - name: clob.readline tests
        run: |
          cd rebel-readline
          ./script/test

      - uses: actions/upload-artifact@v4
        with:
          path: clob.jar
          name: clob-jar

  # Initial task to compile a JAR, store as a pipeline artifact to be used by
  # downstream builders.
  build-jar-sci:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - uses: actions/cache@v4
        with:
          path: ~/.gitlibs
          key: ${{ runner.os }}-deps-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Parse Ref
        id: parse-ref
        run: |
          echo ::set-output name=version::${GITHUB_REF#refs/tags/}

      - name: Install Node.js 9.x
        uses: actions/setup-node@v4
        with:
          node-version: 9.x

      - name: Setup Clojure (https://github.com/marketplace/actions/setup-clojure)
        uses: DeLaGuardo/setup-clojure@master
        with:
          cli: ${{ env.TOOLS_CLI_VERSION }}

      - name: Check clojure version
        run: clojure -Sdescribe

      - name: Build into uberjar
        run: |
          scripts/compile-sci-uberjar && \
          mv target/clob-sci.jar clob-sci.jar

      - uses: actions/upload-artifact@v4
        with:
          path: clob-sci.jar
          name: clob-sci-jar

  # Use GraalVM on macOS to convert JAR to a native macOS binary
  native-image-mac:
    needs: [build-jar-sci]
    runs-on: macos-14
    timeout-minutes: 10
    steps:
      - name: Parse Ref
        id: parse-ref
        run: |
          echo ::set-output name=version::${GITHUB_REF#refs/tags/}

      # === used for running tests, maybe extract into separate job

      - uses: actions/cache@v4
        with:
          path: /Users/runner/hostedtoolcache/GraalVM
          key: ${{ runner.os }}-graal-${{ env.GRAAL_VERSION }}
          restore-keys: |
            ${{ runner.os }}-graal-

      - name: Setup Clojure (https://github.com/marketplace/actions/setup-clojure)
        uses: DeLaGuardo/setup-clojure@master
        with:
          cli: ${{ env.TOOLS_CLI_VERSION }}

      - name: Check clojure version
        run: clojure -Sdescribe

      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ===

      - uses: actions/download-artifact@v4
        with:
          name: clob-sci-jar
          path: .

      - name: Prepare GraalVM
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm-version: ${{ env.GRAAL_VERSION }}

      - name: Install native-image
        run: gu install native-image

      - run: |
          which native-image

      - name: Build macOS native image
        run: scripts/compile-native-image clob-sci.jar

      - uses: actions/upload-artifact@v4
        with:
          path: clob-sci
          name: clob-sci-macos

      - run: brew install expect

      - name: Test binary
        run: ./scripts/test-sci-binary.sh

      # - name: Run tests with binary
      #   run: env CI_ENV=1 __CLOB_USE_SCI_EVAL__=1 clojure -M:sci:test -m cognitect.test-runner

  native-image-linux:
    needs: [build-jar-sci]
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - name: Parse Ref
        id: parse-ref
        run: |
          echo ::set-output name=version::${GITHUB_REF#refs/tags/}

      # === used for running tests, maybe extract into separate job

      - uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/GraalVM
          key: ${{ runner.os }}-graal-${{ env.GRAAL_VERSION }}
          restore-keys: |
            ${{ runner.os }}-graal-

      - name: Setup Clojure (https://github.com/marketplace/actions/setup-clojure)
        uses: DeLaGuardo/setup-clojure@master
        with:
          cli: ${{ env.TOOLS_CLI_VERSION }}

      - name: Check clojure version
        run: clojure -Sdescribe

      - name: Git checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ===

      - uses: actions/download-artifact@v4
        with:
          name: clob-sci-jar
          path: .

      - name: Prepare GraalVM
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm-version: ${{ env.GRAAL_VERSION }}

      - name: Install native-image
        run: gu install native-image

      - run: |
          which native-image

      - name: Build Linux native image
        run: scripts/compile-native-image clob-sci.jar

      - uses: actions/upload-artifact@v4
        with:
          path: clob-sci
          name: clob-sci-linux

      - run: sudo apt-get install -y expect

      - name: Test binary
        run: ./scripts/test-sci-binary.sh

      # - name: Run tests with binary
      #   run: env CI_ENV=1 __CLOB_USE_SCI_EVAL__=1 clojure -M:sci:test -m cognitect.test-runner

  # Collate artifacts, upload to GitHub Releases on semver tags

  # releaser:
  #   needs: [native-image-mac]
  #   timeout-minutes: 10
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - name: Parse Ref
  #       id: parse-ref
  #       run: |
  #         echo ::set-output name=version::${GITHUB_REF#refs/tags/}

  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: clob-sci
  #         path: .

  #     - name: Create Release
  #       id: create-release
  #       uses: actions/create-release@v1.0.0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: ${{ github.ref }}
  #         draft: false
  #         prerelease: false

  #     - name: Upload Release Asset
  #       id: upload-release-asset
  #       uses: actions/upload-release-asset@v1.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: ./clob-sci.tgz
  #         asset_name: clob-sci.tgz
  #         asset_content_type: application/tar+gzip
